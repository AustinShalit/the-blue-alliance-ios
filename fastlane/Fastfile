default_platform :ios

platform :ios do

  desc "Setup CI"
  lane :setup_ci do
    setup_travis
    setup_secrets
  end

  ## CI Lanes ##

  desc "Setup Secrets.plist file (used by CI)"
  private_lane :setup_secrets do
    set_info_plist_value(path: "the-blue-alliance-ios/Secrets.plist", key: "tba_api_key", value: ENV['TBA_API_KEY'])
  end

  desc "Run match on CI"
  lane :match_ci do
    match(
      git_url: "https://#{ENV["GITHUB_TOKEN"]}@github.com/ZachOrr/tba-ios-certificates.git",
      keychain_name: "fastlane_tmp_keychain"
    )
    update_project_team(teamid: ENV["sigh_com.the-blue-alliance.tba_appstore_team-id"])
    update_project_provisioning(
      profile: ENV["sigh_com.the-blue-alliance.tba_appstore_profile-path"],
      target_filter: "The Blue Alliance",
      build_configuration: "Release",
      code_signing_identity: "iPhone Distribution"
    )
  end

  ## End CI Lanes ##

  ## Create A New Version Lanes ##

  desc "Create a new app version (major, minor, patch, build) by bumping the version number and creating a changelog"
  lane :new_version do |options|
    version_type = options[:version_type]
    # Bump version accordingly
    if version_type != "build"
      increment_version_number(bump_type: version_type)
    end
    increment_build_number
    # Create new changelog file
    if version_type != "build"
      sh("touch", "../release_notes/#{current_version}")
    end
    # Commit our version bump and changelog file
    commit_version_bump(message: "[skip ci] New version - #{current_version}", xcodeproj: "the-blue-alliance-ios.xcodeproj", include: "release_notes/#{current_version}")
  end

  ## End Create A New Version Lanes ##

  desc "Bump version and push if necessary"
  private_lane :ensure_version_bump do
    if !git_tag_exists(tag: current_git_tag)
      UI.success("`#{current_git_tag}` is a new version, all good! ðŸ’ª")
    else
      UI.user_error!("A tag with the name `#{current_git_tag}` already exists! Run `fastlane new_version` to generate a new version.")
    end
  end

  ## Release Lanes ##

  desc "Upload a new beta build to TestFlight"
  lane :beta do |options|
    if is_ci?
      slack(channel: "#dev-ios", message: "Shipping #{current_git_tag} to TestFlight...", default_payloads: [])
    end

    preship
    gym(scheme: "The Blue Alliance")

    if is_ci?
      # Upload to TestFlight and move on to next steps
      pilot(changelog: commit_changelog_short, skip_waiting_for_build_processing: true)
    else
      # Upload to TestFlight and wait for completion locally
      pilot(changelog: commit_changelog_short, distribute_external: true)
    end

    if is_ci?
      ship_github(is_prerelease: true) # Create GitHub release
      slack(
        channel: "#dev-ios",
        message: "#{current_git_tag} uploaded to TestFlight ðŸŽ‰",
        payload: {
          "GitHub Release": "https://github.com/the-blue-alliance/the-blue-alliance-ios/releases/tag/#{current_git_tag}"
        }
        default_payloads: [],
      )
    end
  end

  desc "Upload a new build to the App Store"
  lane :app_store do
    # ship
    # deliver
    # ship_github(is_prerelease: false) # Create GitHub release
    # slack(message: "#{current_git_tag} shipped to the App Store ðŸŽ‰")
  end

  ## End Release Lanes ##

  ## Shipping Lanes for Release Lanes ##

  desc "Perform pre-ship tasks"
  private_lane :preship do
    if is_ci == false
      ensure_git_status_clean # Ensure we're in a clean repo before uploading
      ensure_git_branch # Ensure we're on master before shipping
    end
    ensure_version_bump # Ensure we're on a new version
  end

  private_lane :ship_github do |options|
    set_github_release(
      repository_name: "the-blue-alliance/the-blue-alliance-ios",
      api_token: ENV["GITHUB_TOKEN"],
      name: current_git_tag,
      tag_name: current_git_tag,
      commitish: commit,
      description: commit_changelog,
      is_prerelease: options[:is_prerelease] ? true : false,
      upload_assets: ["The Blue Alliance.ipa", "The Blue Alliance.app.dSYM.zip"]
    )
  end

  ## End Shipping Lanes for Release Lanes ##

  ## Internal Lanes for Shipping Lanes ##

  private_lane :current_git_tag do
    "#{current_version}b#{get_build_number}"
  end

  private_lane :current_version do
    "v#{get_version_number}"
  end

  # desc "Release notes and changelog"
  # private_lane :github_changelog do
  #   "#{version_changelog}\n## Changelog\n#{commit_changelog}"
  # end

  # desc "Release notes for version"
  # private_lane :release_notes do
  #   File.read("../release_notes/#{current_version}")
  # end

  # desc "Get changelog from git commits between HEAD and last version tag"
  # lane :commit_changelog_version do
  #   changelog_from_git_commits(
  #     pretty: changelog_commit_format,
  #     merge_commit_filtering: "exclude_merges"
  #   )
  # end

  private_lane :commit_changelog_short do
    changelog_from_git_commits(
      pretty: "%s",
      merge_commit_filtering: "exclude_merges"
    )
  end

  desc "Get changelog from git commits between HEAD and latest tag"
  private_lane :commit_changelog do |options|
    changelog_from_git_commits(
      # tag_match_pattern: options[:tag_match_pattern] || nil,
      pretty: "{{[%h|https://github.com/the-blue-alliance/the-blue-alliance-ios/commit/%h]}} [%an]: %s",
      merge_commit_filtering: "exclude_merges"
    )
  end

  ## End Internal Lanes for Shipping Lanes ##

end

error do |lane, exception|
  slack(
    message: exception.to_s,
    success: false,
    username: "Travis CI",
  ) if is_ci? && ENV['SLACK_URL'] && git_branch == "master"
end
